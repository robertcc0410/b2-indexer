// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: api/protobuf/api.proto

package protobuf

import (
	context "context"
	vo "github.com/b2network/b2-indexer/api/protobuf/vo"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HelloService_GetHello_FullMethodName = "/api.protobuf.HelloService/GetHello"
)

// HelloServiceClient is the client API for HelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloServiceClient interface {
	GetHello(ctx context.Context, in *vo.HelloRequest, opts ...grpc.CallOption) (*vo.HelloResponse, error)
}

type helloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloServiceClient(cc grpc.ClientConnInterface) HelloServiceClient {
	return &helloServiceClient{cc}
}

func (c *helloServiceClient) GetHello(ctx context.Context, in *vo.HelloRequest, opts ...grpc.CallOption) (*vo.HelloResponse, error) {
	out := new(vo.HelloResponse)
	err := c.cc.Invoke(ctx, HelloService_GetHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServiceServer is the server API for HelloService service.
// All implementations must embed UnimplementedHelloServiceServer
// for forward compatibility
type HelloServiceServer interface {
	GetHello(context.Context, *vo.HelloRequest) (*vo.HelloResponse, error)
	mustEmbedUnimplementedHelloServiceServer()
}

// UnimplementedHelloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloServiceServer struct {
}

func (UnimplementedHelloServiceServer) GetHello(context.Context, *vo.HelloRequest) (*vo.HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHello not implemented")
}
func (UnimplementedHelloServiceServer) mustEmbedUnimplementedHelloServiceServer() {}

// UnsafeHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloServiceServer will
// result in compilation errors.
type UnsafeHelloServiceServer interface {
	mustEmbedUnimplementedHelloServiceServer()
}

func RegisterHelloServiceServer(s grpc.ServiceRegistrar, srv HelloServiceServer) {
	s.RegisterService(&HelloService_ServiceDesc, srv)
}

func _HelloService_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServiceServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HelloService_GetHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServiceServer).GetHello(ctx, req.(*vo.HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloService_ServiceDesc is the grpc.ServiceDesc for HelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protobuf.HelloService",
	HandlerType: (*HelloServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello",
			Handler:    _HelloService_GetHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/api.proto",
}

const (
	SinohopeService_TransactionNotify_FullMethodName = "/api.protobuf.SinohopeService/TransactionNotify"
	SinohopeService_WithdrawalConfirm_FullMethodName = "/api.protobuf.SinohopeService/WithdrawalConfirm"
)

// SinohopeServiceClient is the client API for SinohopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SinohopeServiceClient interface {
	TransactionNotify(ctx context.Context, in *vo.TransactionNotifyRequest, opts ...grpc.CallOption) (*vo.TransactionNotifyResponse, error)
	WithdrawalConfirm(ctx context.Context, in *vo.WithdrawalConfirmRequest, opts ...grpc.CallOption) (*vo.WithdrawalConfirmResponse, error)
}

type sinohopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSinohopeServiceClient(cc grpc.ClientConnInterface) SinohopeServiceClient {
	return &sinohopeServiceClient{cc}
}

func (c *sinohopeServiceClient) TransactionNotify(ctx context.Context, in *vo.TransactionNotifyRequest, opts ...grpc.CallOption) (*vo.TransactionNotifyResponse, error) {
	out := new(vo.TransactionNotifyResponse)
	err := c.cc.Invoke(ctx, SinohopeService_TransactionNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sinohopeServiceClient) WithdrawalConfirm(ctx context.Context, in *vo.WithdrawalConfirmRequest, opts ...grpc.CallOption) (*vo.WithdrawalConfirmResponse, error) {
	out := new(vo.WithdrawalConfirmResponse)
	err := c.cc.Invoke(ctx, SinohopeService_WithdrawalConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SinohopeServiceServer is the server API for SinohopeService service.
// All implementations must embed UnimplementedSinohopeServiceServer
// for forward compatibility
type SinohopeServiceServer interface {
	TransactionNotify(context.Context, *vo.TransactionNotifyRequest) (*vo.TransactionNotifyResponse, error)
	WithdrawalConfirm(context.Context, *vo.WithdrawalConfirmRequest) (*vo.WithdrawalConfirmResponse, error)
	mustEmbedUnimplementedSinohopeServiceServer()
}

// UnimplementedSinohopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSinohopeServiceServer struct {
}

func (UnimplementedSinohopeServiceServer) TransactionNotify(context.Context, *vo.TransactionNotifyRequest) (*vo.TransactionNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionNotify not implemented")
}
func (UnimplementedSinohopeServiceServer) WithdrawalConfirm(context.Context, *vo.WithdrawalConfirmRequest) (*vo.WithdrawalConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalConfirm not implemented")
}
func (UnimplementedSinohopeServiceServer) mustEmbedUnimplementedSinohopeServiceServer() {}

// UnsafeSinohopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SinohopeServiceServer will
// result in compilation errors.
type UnsafeSinohopeServiceServer interface {
	mustEmbedUnimplementedSinohopeServiceServer()
}

func RegisterSinohopeServiceServer(s grpc.ServiceRegistrar, srv SinohopeServiceServer) {
	s.RegisterService(&SinohopeService_ServiceDesc, srv)
}

func _SinohopeService_TransactionNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.TransactionNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinohopeServiceServer).TransactionNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SinohopeService_TransactionNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinohopeServiceServer).TransactionNotify(ctx, req.(*vo.TransactionNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SinohopeService_WithdrawalConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.WithdrawalConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SinohopeServiceServer).WithdrawalConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SinohopeService_WithdrawalConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SinohopeServiceServer).WithdrawalConfirm(ctx, req.(*vo.WithdrawalConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SinohopeService_ServiceDesc is the grpc.ServiceDesc for SinohopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SinohopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protobuf.SinohopeService",
	HandlerType: (*SinohopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionNotify",
			Handler:    _SinohopeService_TransactionNotify_Handler,
		},
		{
			MethodName: "WithdrawalConfirm",
			Handler:    _SinohopeService_WithdrawalConfirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/api.proto",
}

const (
	MpcService_MpcCheck_FullMethodName = "/api.protobuf.MpcService/MpcCheck"
)

// MpcServiceClient is the client API for MpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MpcServiceClient interface {
	MpcCheck(ctx context.Context, in *vo.MpcCheckRequest, opts ...grpc.CallOption) (*vo.MpcCheckResponse, error)
}

type mpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMpcServiceClient(cc grpc.ClientConnInterface) MpcServiceClient {
	return &mpcServiceClient{cc}
}

func (c *mpcServiceClient) MpcCheck(ctx context.Context, in *vo.MpcCheckRequest, opts ...grpc.CallOption) (*vo.MpcCheckResponse, error) {
	out := new(vo.MpcCheckResponse)
	err := c.cc.Invoke(ctx, MpcService_MpcCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MpcServiceServer is the server API for MpcService service.
// All implementations must embed UnimplementedMpcServiceServer
// for forward compatibility
type MpcServiceServer interface {
	MpcCheck(context.Context, *vo.MpcCheckRequest) (*vo.MpcCheckResponse, error)
	mustEmbedUnimplementedMpcServiceServer()
}

// UnimplementedMpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMpcServiceServer struct {
}

func (UnimplementedMpcServiceServer) MpcCheck(context.Context, *vo.MpcCheckRequest) (*vo.MpcCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MpcCheck not implemented")
}
func (UnimplementedMpcServiceServer) mustEmbedUnimplementedMpcServiceServer() {}

// UnsafeMpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MpcServiceServer will
// result in compilation errors.
type UnsafeMpcServiceServer interface {
	mustEmbedUnimplementedMpcServiceServer()
}

func RegisterMpcServiceServer(s grpc.ServiceRegistrar, srv MpcServiceServer) {
	s.RegisterService(&MpcService_ServiceDesc, srv)
}

func _MpcService_MpcCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vo.MpcCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MpcServiceServer).MpcCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MpcService_MpcCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MpcServiceServer).MpcCheck(ctx, req.(*vo.MpcCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MpcService_ServiceDesc is the grpc.ServiceDesc for MpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.protobuf.MpcService",
	HandlerType: (*MpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MpcCheck",
			Handler:    _MpcService_MpcCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/api.proto",
}
